import {Injectable} from '@angular/core';import {HttpClient} from '@angular/common/http';import {mergeMap, map, switchMap} from 'rxjs/operators';import {BehaviorSubject, Observable} from 'rxjs';// @ts-ignoreimport User from '@app/models/User';import Song from '@app/models/Song';import WordsBag from '@app/models/WordsBag';import {plainToClass} from 'class-transformer';import Expression from '@app/models/Expression';@Injectable({  providedIn: 'root',})export default class UserService {  private currentUserSubject: BehaviorSubject<User>;  public currentUser: Observable<User>;  constructor(private http: HttpClient) {    this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));    this.currentUser = this.currentUserSubject.asObservable();  }  public get currentUserValue(): User {    return this.currentUserSubject.value;  }  login(email: string, password: string, rememberMe: boolean) {    return this.http.get('/api/sanctum/csrf-cookie')      .pipe(        mergeMap(() => this.http.post('/api/login', { email, password, rememberMe })),        map((user: User) => {          user = plainToClass(User ,user);          localStorage.setItem('currentUser', JSON.stringify(user));          this.currentUserSubject.next(user);          return user;        })      )  }  logout() {    return this.http.post('/api/logout', {})      .pipe(        map(() => {          localStorage.removeItem('currentUser');          this.currentUserSubject.next(null);        })      )  }  register(data) {    return this.http.post('/api/register', data)      .pipe(        map((user: User) => {          user = plainToClass(User ,user);          localStorage.setItem('currentUser', JSON.stringify(user));          this.currentUserSubject.next(user);          return user;        })      )  }  updateWordsBag(bag: WordsBag): Observable<WordsBag> {    const userId = this.currentUserValue.id;    return this.http.post<WordsBag>(`/api/user/${userId}/wordsBag`, bag)      .pipe(        map((bag: WordsBag) => {          const user = this.currentUserValue;          if (!user.metaData.wordsBags) {            user.metaData.wordsBags = [];          }          user.metaData.wordsBags.push(bag);          localStorage.setItem('currentUser', JSON.stringify(user));          this.currentUserSubject.next(user);          return bag;        })      )  }  updateExpression(exp: Expression): Observable<Expression> {    const userId = this.currentUserValue.id;    return this.http.post<Expression>(`/api/user/${userId}/expression`, exp)      .pipe(        map((exp: Expression) => {          const user = this.currentUserValue;          if (!user.metaData.expressions) {            user.metaData.expressions = [];          }          user.metaData.expressions.push(exp);          localStorage.setItem('currentUser', JSON.stringify(user));          this.currentUserSubject.next(user);          return exp;        })      )  }  deleteWordsBag(bagId: string) {    const userId = this.currentUserValue.id;    return this.http.delete(`/api/user/${userId}/wordsBag/${bagId}`)      .pipe(        map(res => {          if (res) {            const user = this.currentUserValue;            const { wordsBags } = user.metaData;            user.metaData.wordsBags = wordsBags.filter(bag => bag.id !== bagId);            localStorage.setItem('currentUser', JSON.stringify(user));            this.currentUserSubject.next(user);          }          return res;        })      )  }  deleteExpression(expId: string) {    const userId = this.currentUserValue.id;    return this.http.delete(`/api/user/${userId}/expression/${expId}`)      .pipe(        map(res => {          if (res) {            const user = this.currentUserValue;            const { expressions } = user.metaData;            user.metaData.expressions = expressions.filter(exp => exp.id !== expId);            localStorage.setItem('currentUser', JSON.stringify(user));            this.currentUserSubject.next(user);          }          return res;        })      )  }}